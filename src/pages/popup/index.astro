<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bastion Auth | Sign In</title>
  <link rel="stylesheet" href="styles.css">
  <script src="https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/build/sha256.min.js"></script>
  <style>
    /* ---------- Existing styles ---------- */
    #waitingScreen {
      display: none;
      margin-top: 20px;
      text-align: center;
      align-items: center;
      flex-direction: column;
    }

    .shield-container {
      position: relative;
      width: 60px;
      height: 60px;
      margin-bottom: 10px;
    }

    .shield {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      fill: var(--purple);
      animation: float 3s ease-in-out infinite;
    }

    .shield-pulse {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      fill: var(--purple);
      opacity: 0.3;
      transform-origin: center;
      animation: pulse 2s ease-in-out infinite;
    }

    .checkmark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      stroke: white;
      stroke-width: 4;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-dasharray: 100;
      stroke-dashoffset: 100;
      animation: dash 1.5s ease-in-out infinite alternate;
    }

    .dots {
      display: flex;
      justify-content: center;
      margin: 10px 0;
    }

    .dot {
      width: 8px;
      height: 8px;
      margin: 0 4px;
      border-radius: 50%;
      background-color: var(--purple);
      animation: dot-fade 1.5s ease-in-out infinite;
    }

    .dot:nth-child(2) { animation-delay: 0.5s; }
    .dot:nth-child(3) { animation-delay: 1s; }

    #approveText {
      font-size: 16px;
      margin-top: 5px;
      color: var(--black);
    }

    #appInstructions {
      font-size: 14px;
      margin-top: 5px;
      color: #666;
      font-style: italic;
    }

    @keyframes pulse {
      0% { transform: scale(1); opacity: 0.3; }
      50% { transform: scale(1.2); opacity: 0.1; }
      100% { transform: scale(1); opacity: 0.3; }
    }

    @keyframes dash {
      0% { stroke-dashoffset: 100; }
      70% { stroke-dashoffset: 70; }
      100% { stroke-dashoffset: 70; }
    }

    @keyframes dot-fade {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 1; }
    }

    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-3px); }
    }

    /* ---------- New styles for Create‑Account flow ---------- */
    .create-account-link {
      margin-top: 15px;
      text-align: center;
      font-size: 14px;
    }

    .create-account-link a {
      color: var(--purple);
      text-decoration: underline;
      cursor: pointer;
    }

    #createAccountScreen {
      display: none;
      flex-direction: column;
      align-items: center;
      text-align: center;
      margin-top: 20px;
    }

    #createAccountScreen h2 {
      margin-bottom: 8px;
    }

    .qr-code {
      width: 160px;
      height: 160px;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <header class="modern-header">
    <div class="logo-container">
      <img src="public/bastion-char-purple.svg" alt="BastionLogo">
      <span class="brand-name">Bastion Auth</span>
    </div>
    <div class="header-actions">
      <button class="back-button" id="backButton">Back</button>
    </div>
  </header>

  <main class="main-container">
    <div class="welcome-container">
      <p class="welcome-subtitle">Authentication</p>
      <h1>Welcome back</h1>
      <p class="welcome-description">Sign in securely using your credentials to access your account and devices.</p>
    </div>

    <!-- Sign‑in form wrapper, now with id so we can toggle visibility -->
    <div id="signinForm" class="signin-form">
      <div class="form-group" id="usernameContainer">
        <label for="username">Username</label>
        <input type="text" id="username" placeholder="Enter your username">
      </div>

      <button type="button" id="sendButton" class="signin-button">Sign In</button>

      <!-- Link to create account -->
      <p class="create-account-link">
        <a href="#" id="createAccountLink">Don’t have a Bastion account? Make one here</a>
      </p>

      <!-- Waiting‑for‑approval screen -->
      <div id="waitingScreen">
        <div class="shield-container">
          <svg class="shield-pulse" viewBox="0 0 24 24">
            <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"></path>
          </svg>
          <svg class="shield" viewBox="0 0 24 24">
            <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"></path>
          </svg>
          <svg class="checkmark" viewBox="0 0 24 24" width="36" height="36">
            <path d="M6 12l4 4L18 6"></path>
          </svg>
        </div>
        <div class="dots">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
        <p id="approveText">Waiting for approval on your mobile device...</p>
        <p id="appInstructions">Please allow the authentication request in the Bastion Auth mobile app</p>
      </div>

      <div id="statusMessage"></div>
    </div>

    <!-- Create‑Account screen with QR code -->
    <div id="createAccountScreen">
      <h2>Create your Bastion account</h2>
      <p>Download the Bastion Auth mobile app and create your account to get started.</p>
      <img src="public/bastion-auth-qr.png" alt="Download Bastion Auth" class="qr-code">
      <button id="backToSignIn" class="signin-button">Back to Sign In</button>
    </div>
  </main>

  <script>
    const CLIENT_ID = "test_site_1_spa_id";
    const WS_URL    = "ws://192.168.1.213:8443";
    const WS_PROTO  = "echo-protocol";
    let ws = null;
    let transactionId = null;
    let codeVerifier = null;
    let currentState = null;
    const ERROR_DISPLAY_TIME = 20000; 

    function generateRandomString(len) {
      const arr = new Uint8Array(len);
      crypto.getRandomValues(arr);
      return Array.from(arr).map(b => ('0' + b.toString(16)).slice(-2)).join('');
    }

    async function generatePKCE() {
      codeVerifier = generateRandomString(64);
      const hashBytes = sha256.arrayBuffer
        ? await sha256.arrayBuffer(codeVerifier)
        : new Uint8Array(sha256.array(codeVerifier)).buffer;
      const b64 = btoa(String.fromCharCode(...new Uint8Array(hashBytes)));
      return b64.replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');
    }

    function initWS() {
      if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) return;
      ws = new WebSocket(WS_URL, WS_PROTO);
      ws.binaryType = 'arraybuffer';
      ws.onopen  = () => console.log('WebSocket connected');
      ws.onerror = err => console.error('WebSocket error', err);
      ws.onclose = () => setTimeout(initWS, 3000);
      ws.onmessage = async evt => {
        let text;
        if (evt.data instanceof Blob) text = await evt.data.text();
        else if (evt.data instanceof ArrayBuffer) text = new TextDecoder().decode(evt.data);
        else text = evt.data;

        console.log('WS msg:', text);
        let msg;
        try { msg = JSON.parse(text); } catch { return; }

        if (msg.action === 'signin_started') {
          transactionId = msg.transaction_id;
          currentState  = msg.state;
          showWaitingScreen();
          return;
        }
        if (msg.action === 'og_challenge_code_req') {
          ws.send(JSON.stringify({
            action: 'og_challenge_code_res',
            transaction_id: transactionId,
            code_verifier: codeVerifier,
            state: currentState
          }));
          return;
        }

        switch (msg.status) {
          case 'invalid':
            resetAll();
            showStatus(msg.error || 'Invalid request. Please try again.', 'error');
            return;
          case 'invalid_char':
            resetAll();
            showStatus(msg.error || 'Invalid characters or username too short.', 'error');
            return;
          case 'db_error':
            resetAll();
            showStatus(msg.error || 'Server error. Please try again later.', 'error');
            return;
          case 'user_no_exist':
            resetAll();
            showStatus(msg.error || 'User does not exist. Please check your username.', 'error');
            return;
          case 'approved':
            showStatus('Authentication successful!', 'success');
            resetAll();
            return;
          case 'rejected':
            showStatus('Authentication rejected. Please try again.', 'error');
            resetAll();
            return;
          default:
            return;
        }
      };
    }

    async function sendUsernameToServer() {
      const user = document.getElementById('username').value.trim();
      if (!user) { showStatus('Please enter a username', 'error'); return; }
      if (!ws || ws.readyState !== WebSocket.OPEN) { initWS(); setTimeout(sendUsernameToServer, 500); return; }
      const state = generateRandomString(16);
      let challenge;
      try { challenge = await generatePKCE(); }
      catch (e) { showStatus('Crypto error', 'error'); return; }
      ws.send(JSON.stringify({ action: 'start_signin', client_id: CLIENT_ID, username: user, code_challenge: challenge, code_challenge_method: 'S256', state }));
      console.log('Sent start_signin');
      showWaitingScreen();
    }

    function showWaitingScreen() {
      document.getElementById('usernameContainer').style.display = 'none';
      document.getElementById('sendButton').style.display     = 'none';
      document.getElementById('waitingScreen').style.display  = 'flex';
      document.getElementById('statusMessage').style.display  = 'none';
    }

    function resetAll() {
      if (ws) { ws.close(); ws = null; }
      document.getElementById('usernameContainer').style.display = 'block';
      document.getElementById('sendButton').style.display       = 'block';
      document.getElementById('waitingScreen').style.display    = 'none';
      document.getElementById('statusMessage').style.display    = 'none';
    }

    function showStatus(msg, type) {
      const el = document.getElementById('statusMessage');
      el.textContent = msg;
      el.className   = type === 'error' ? 'status-error' : 'status-success';
      el.style.display = 'block';
      const displayTime = type === 'error' ? ERROR_DISPLAY_TIME : 3000;
      setTimeout(() => el.style.display = 'none', displayTime);
    }

    /* ---------- Navigation between Sign‑in and Create‑Account screens ---------- */
    function showCreateAccount() {
      document.getElementById('signinForm').style.display      = 'none';
      document.getElementById('createAccountScreen').style.display = 'flex';
    }

    function backToSignIn() {
      document.getElementById('createAccountScreen').style.display = 'none';
      document.getElementById('signinForm').style.display      = 'block';
      resetAll();
    }

    document.getElementById('createAccountLink').onclick = e => { e.preventDefault(); showCreateAccount(); };
    document.getElementById('backToSignIn').onclick      = backToSignIn;

    document.getElementById('backButton').onclick        = backToSignIn;
    document.getElementById('sendButton').onclick        = sendUsernameToServer;
    document.getElementById('username').addEventListener('keypress', e => { if (e.key === 'Enter') sendUsernameToServer(); });

    window.addEventListener('load', initWS);
  </script>
</body>
</html>
