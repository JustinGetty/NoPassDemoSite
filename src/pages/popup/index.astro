<!-- index.html -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bastion Auth | Sign In</title>
  <link rel="stylesheet" href="styles.css">
  <script src="https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/build/sha256.min.js"></script>
  <style>
    #waitingScreen {
      display: none;
      margin-top: 20px;
      text-align: center;
    }
    #waitingScreen svg {
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
    #approveText { font-size: 16px; margin-top: 10px; color: var(--black); }
  </style>
</head>
<body>
  <header class="modern-header">
    <div class="logo-container">
      <img src="public/bastion-char-purple.svg" alt="BastionLogo">
      <span class="brand-name">Bastion Auth</span>
    </div>
    <div class="header-actions">
      <button class="back-button" id="backButton">Back</button>
    </div>
  </header>

  <main class="main-container">
    <div class="welcome-container">
      <p class="welcome-subtitle">Authentication</p>
      <h1>Welcome back</h1>
      <p class="welcome-description">Sign in securely using your credentials to access your account and devices.</p>
    </div>

    <div class="signin-form">
      <div class="form-group" id="usernameContainer">
        <label for="username">Username</label>
        <input type="text" id="username" placeholder="Enter your username">
      </div>

      <button type="button" id="sendButton" class="signin-button">Sign In</button>

      <div id="waitingScreen">
        <svg viewBox="0 0 50 50">
          <circle cx="25" cy="25" r="20" stroke="var(--purple)" stroke-width="4" fill="none" stroke-dasharray="31.4 31.4" stroke-linecap="round"></circle>
        </svg>
        <p id="approveText">Waiting for approval on your mobile device...</p>
      </div>

      <div id="statusMessage"></div>
    </div>
  </main>

  <script>
    const CLIENT_ID = "test_site_1_spa_id";
    const WS_URL    = "ws://192.168.1.213:8443";
    const WS_PROTO  = "echo-protocol";
    let ws = null;
    let transactionId = null;
    let codeVerifier = null;
    let currentState = null;

    function generateRandomString(len) {
      const arr = new Uint8Array(len);
      crypto.getRandomValues(arr);
      return Array.from(arr).map(b => ('0' + b.toString(16)).slice(-2)).join('');
    }

    async function generatePKCE() {
      codeVerifier = generateRandomString(64);
      const hashBytes = sha256.arrayBuffer
        ? await sha256.arrayBuffer(codeVerifier)
        : new Uint8Array(sha256.array(codeVerifier)).buffer;
      const b64 = btoa(String.fromCharCode(...new Uint8Array(hashBytes)));
      return b64.replace(/\+/g,'-').replace(/\//g,'_').replace(/=+$/,'');
    }

    function initWS() {
      if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) return;
      ws = new WebSocket(WS_URL, WS_PROTO);
      ws.binaryType = 'arraybuffer';
      ws.onopen = () => console.log('WebSocket connected');
      ws.onerror = err => console.error('WebSocket error', err);
      ws.onclose = () => setTimeout(initWS, 3000);
      ws.onmessage = async evt => {
        let text;
        if (evt.data instanceof Blob) text = await evt.data.text();
        else if (evt.data instanceof ArrayBuffer) text = new TextDecoder().decode(evt.data);
        else text = evt.data;

        console.log('WS msg:', text);
        let msg;
        try { msg = JSON.parse(text); } catch { return; }

        if (msg.action === 'signin_started') {
          transactionId = msg.transaction_id;
          currentState = msg.state;
          showWaitingScreen();
          return;
        }
        if (msg.action === 'og_challenge_code_req') {
          ws.send(JSON.stringify({
            action: 'og_challenge_code_res',
            transaction_id: transactionId,
            code_verifier: codeVerifier,
            state: currentState
          }));
          return;
        }

        switch (msg.status) {
          case 'invalid':
            resetAll();
            showStatus(msg.error || 'Uh Oh, INVALID AHHHH', 'error');
            return;
          case 'invalid_char':
            resetAll();
            showStatus(msg.error || 'Invalid Character(s) or Username Too Short', 'error');
            return;
          case 'db_error':
            resetAll();
            showStatus(msg.error || 'Server Error. Please try again later.', 'error');
            return;
          case 'user_no_exist':
            resetAll();
            showStatus(msg.error || 'User Does Not Exist', 'error');
            return;
          case 'approved':
            showStatus('Authentication successful!', 'success');
            resetAll();
            return;
          case 'rejected':
            showStatus('Authentication rejected.', 'error');
            resetAll();
            return;
          default:
            return;
        }
      };
    }

    async function sendUsernameToServer() {
      const user = document.getElementById('username').value.trim();
      if (!user) { showStatus('Please enter a username', 'error'); return; }
      if (!ws || ws.readyState !== WebSocket.OPEN) {
        initWS(); setTimeout(sendUsernameToServer, 500); return;
      }
      const state = generateRandomString(16);
      let challenge;
      try {
        challenge = await generatePKCE();
      } catch (e) {
        showStatus('Crypto error', 'error'); return;
      }
      ws.send(JSON.stringify({ action: 'start_signin', client_id: CLIENT_ID, username: user, code_challenge: challenge, code_challenge_method: 'S256', state }));
      console.log('Sent start_signin');
      showWaitingScreen();
    }

    function showWaitingScreen() {
      document.getElementById('usernameContainer').style.display = 'none';
      document.getElementById('sendButton').style.display = 'none';
      document.getElementById('waitingScreen').style.display = 'flex';
    }

    function resetAll() {
      if (ws) { ws.close(); ws = null; }
      document.getElementById('usernameContainer').style.display = 'block';
      document.getElementById('sendButton').style.display = 'block';
      document.getElementById('waitingScreen').style.display = 'none';
      document.getElementById('statusMessage').style.display = 'none';
    }

    function showStatus(msg, type) {
      const el = document.getElementById('statusMessage');
      el.textContent = msg;
      el.className = type === 'error' ? 'status-error' : 'status-success';
      el.style.display = 'block';
      setTimeout(() => el.style.display = 'none', 3000);
    }

    document.getElementById('backButton').onclick = resetAll;
    document.getElementById('sendButton').onclick = sendUsernameToServer;
    window.addEventListener('load', initWS);
  </script>
</body>
</html>
